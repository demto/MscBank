@model MScBank.ViewModels.MyAccountsViewmodel
@using MScBank.Models
@{
    ViewBag.Title = "AccountDetails";
}
@{ 
    <!--Modal logic-->
    string popupMessage = "";
    string targetId = "";

    if(Model.MyAccount is CurrentAccount || Model.MyAccount is SavingsAccount) {
        if(Model.MyAccount.Balance != 0) {
            popupMessage = "modal";
            targetId = "nonZeroBalanceClosure";
        }
    }

    <!--BankCard info display logic-->
    string cardMessage = "";
    bool canHaveCard = false;

    if(Model.MyAccount is CurrentAccount) {
        CurrentAccount myCurrentAccount = (CurrentAccount)Model.MyAccount;
        cardMessage = myCurrentAccount.HasCard().ToString();

        if (!myCurrentAccount.HasCard()) {
            canHaveCard = true;
        }
    } else {
        cardMessage = "This account type cannot have a card";
    }

    <!--Check if user has different types of account to display appropriate delete or pay buttons-->
    bool hasLoan = false;
    bool hasMortgage = false;
    bool hasCc = false;

    foreach (var a in Model.MyAccounts) {
        if (a is Loan) {
            hasLoan = true;
        }else if (a is CreditCard){
            hasCc = true;
        }else if(a is Mortgage) {
            hasMortgage = true;
        }
    };

    <!--Can only transfer from current account or savings account-->
    bool canTransfer = false;
    if(Model.MyAccount is CurrentAccount || Model.MyAccount is SavingsAccount) {
        canTransfer = true;
    };

    <!--Loan term to display info-->
    string loanRemainingTermString = "";
    string mortgageRemainingTermString = "";
    int loanTerm = 0;
    int mortgageTerm = 0;

    if (Model.MyAccount is Loan){

        Loan loan = (Loan) Model.MyAccount;
        loanTerm = loan.Term;
        int elapsedTerm = DateTime.Now.Year - Model.MyAccount.OpenDate.Year;

        if (DateTime.Now.Month < Model.MyAccount.OpenDate.Month ||
            (DateTime.Now.Month == Model.MyAccount.OpenDate.Month && DateTime.Now.Day < Model.MyAccount.OpenDate.Day)) {
            elapsedTerm--;
        }

        int remainingTerm = loan.Term - elapsedTerm;

        loanRemainingTermString = remainingTerm.ToString();

    }

    if (Model.MyAccount is Mortgage) {

        Mortgage loan = (Mortgage)Model.MyAccount;
        mortgageTerm = loan.Term;
        int elapsedTerm = DateTime.Now.Year - Model.MyAccount.OpenDate.Year;

        if (DateTime.Now.Month < Model.MyAccount.OpenDate.Month ||
            (DateTime.Now.Month == Model.MyAccount.OpenDate.Month && DateTime.Now.Day < Model.MyAccount.OpenDate.Day)) {
            elapsedTerm--;
        }

        int remainingTerm = loan.Term - elapsedTerm;

        mortgageRemainingTermString = remainingTerm.ToString();

    }


}

<h2>My AccountDetails</h2>
<div class="row">
    <div class="col-md-4">
        <div class="addMargin bordered-box">
            <p><span style="font-weight:bold">Owner :</span> @Model.User.FullName</p>
            <p><span style="font-weight:bold">Name of Account : </span>@Model.MyAccount.Name</p>
            <p><span style="font-weight:bold">Type of account : </span> @Model.MyAccount.Type</p>
            <p><span style="font-weight:bold"> Existing Card for the account : </span>@cardMessage</p>          
            <p><span style="font-weight:bold">Sort code : </span>@Model.MyAccount.SortCode</p>
            <p><span style="font-weight:bold">Account Number : </span>@Model.MyAccount.AccountNumber</p>
            <p><span style="font-weight:bold">Opened : </span>@Model.MyAccount.OpenDate</p>
            @if (Model.MyAccount is Loan) {<p><span style="font-weight:bold">Original term : </span>@loanTerm</p>
                                           <p><span style="font-weight:bold">Remaining term : </span>@loanRemainingTermString</p>}
        </div>        
    </div>
    <div class="col-md-4">
        <div class="addMargin">
            <div class="col-md-6 addMargin">
            @if (canTransfer) {@Html.ActionLink("Transfer Funds", "TransferFunds", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addMargin" }) <br />}
            @if (Model.MyAccount is CreditCard) {@Html.ActionLink("Purchase something", "CcPurchase", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addMargin" })<br />}
            <!-- Trigger the modal with a button -->
            <button type="button" class="btn btn-primary btn-sm addMargin" data-toggle="@popupMessage" data-target="#@targetId">Close this account</button>
                <br />
            </div>
            <div class="col-md-offset-2 col-md-4 addMargin">
                @if (Model.MyAccount is CurrentAccount && hasCc) { @Html.ActionLink("Pay Credit Card", "PayCreditCard", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addMargin" })<br />}
                @if (Model.MyAccount is CurrentAccount && hasLoan) { @Html.ActionLink("Pay Loan", "PayLoan", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addMargin" })<br />}
                @if (Model.MyAccount is CurrentAccount && hasMortgage) { @Html.ActionLink("Pay Mortgage", "PayMortgage", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addMargin" })<br />}
                @if (Model.MyAccount is CurrentAccount || canHaveCard) { @Html.ActionLink("Order Card", "OrderCard", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addmargin" })<br />}
            </div>
        </div>        
    </div>
    <div class="col-md-4">
        <div class="addMargin">
            <img src="~/Content/Pics/AccountDetailsPic.jpg" class="img-responsive img-circle"/>
        </div>
    </div>
</div>


<div class="row">
    <div class="center-block">
        @if (Model.Transactions.Any()) {
            <table class="table table-bordered table-hover table-responsive">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Time of transaction</th>
                        <th>Amount</th>
                        <th>Account Balance after transaction</th>
                    </tr>
                </thead>
                <tbody>
                        @foreach (var t in Model.Transactions) {

                            string balanceColor = Model.MyAccount.Balance > 0 ? "text-success" : "text-danger";

                            <tr>
                                <td class="balanceColor">@t.Id</td>
                                <td class="balanceColor">@t.TransactionTimeStamp</td>
                                <td class="balanceColor">@t.Amount</td>
                                <td class="balanceColor">@Model.MyAccount.Balance</td>
                            </tr>                            
                        }
                </tbody>
            </table>             
        } else {
            <p class="text-danger">No transactions on this account yet!</p>
        }
    </div>
</div>


<!----------------------------MODAL-------------------------------------------->

<!-- Modal -->
<div class="modal fade" id="nonZeroBalanceClosure" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title text-danger">Invalid operation request</h4>
            </div>
            <div class="modal-body">
                <p>You are trying to close an account with a balance!</p>
                <p>Please transfer your funds to another account before closing or you can collect your cash next time you are in your local branch!</p>
                <p>Please make sure you have an ID on you when collecting money in branch!</p>
                <p>Please click cancel if you want to transfer money out first or click Delete account if you are happy to collect money in your local branch!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-sm pull-left" data-dismiss="modal">Cancel</button>
                @Html.ActionLink("Close Account", "CloseAccount", "MyAccounts", new { accountId = Model.MyAccount.Id }, new { @class = "btn btn-primary btn-sm addMargin pull-right" })
            </div>
        </div>

    </div>
</div>








